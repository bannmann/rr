plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

defaultTasks 'build'

version = '0.2-SNAPSHOT'
group = 'com.github.bannmann.trako'

def buildTime = new Date()

def generatedSrc = "$buildDir/generated-src/main/java"

sourceSets {
    main {
        java {
            srcDirs += ["$generatedSrc"]
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.sf.saxon:Saxon-HE:10.6'
    implementation 'org.apache.xmlgraphics:batik-all:1.14'
    implementation 'xml-apis:xml-apis-ext:1.3.04'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.6'
}

configurations.all {
    transitive = false
}

jar {
    manifest {
        attributes (
            'Implementation-Version': archiveVersion,
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(buildTime)
        )
    }
    archiveFileName = "${project.name}.jar"
}

task generateSrc {
    doFirst {
        def trakoVersion = new File("$generatedSrc/com/github/bannmann/trako", 'TrakoVersion.java')
        trakoVersion.parentFile.exists() || trakoVersion.parentFile.mkdirs()
        trakoVersion.withWriter {
            it << $/package com.github.bannmann.trako;

public class TrakoVersion
{
  public static final String VERSION = "$version";
  public static final String DATE = "${new java.text.SimpleDateFormat("MMM dd, yyyy", Locale.US).format(buildTime)}";
}
/$
        }
    }
}

compileJava {
    dependsOn generateSrc
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.github.bannmann.trako.Trako'
    }
    baseName = 'trako'
    classifier = 'all'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    with jar
}

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

publishing {
    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        jar(MavenPublication) {
            from components.java
            artifact fatJar

            pom {
                artifactId = 'trako'
                groupId = group
                name = group + ':' + project.name
                description = 'Railroad diagram generator'
                url = 'https://github.com/bannmann/trako'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://opensource.org/licenses/Apache-2.0'
                    }
                }
                developers {
                    developer {
                        name = 'Jens Bannmann'
                        email = 'jens.b@web.de'
                        organization = 'Jens Bannmann'
                        organizationUrl = 'https://github.com/bannmann/'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:bannmann/trako.git'
                    developerConnection = 'scm:git:git@github.com:bannmann/trako.git'
                    url = 'https://github.com/bannmann/trako/'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.jar
}
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
